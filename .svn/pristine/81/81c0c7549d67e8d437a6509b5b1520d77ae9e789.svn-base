/* -------------------------------------------------------------------------- *
 *                           MMB (MacroMoleculeBuilder)                       *
 * -------------------------------------------------------------------------- *
 *                                                                            *
 * Copyright (c) 2011-12 by the Author.                                       *
 * Author: Samuel Flores                                                      *
 *                                                                            *
 * See RNABuilder.cpp for the copyright and usage agreement.                  *
 * -------------------------------------------------------------------------- */

#ifndef AtomSpringContainer_H_
#define AtomSpringContainer_H_

#include "Utils.h"

class BiopolymerClassContainer;

class MMB_EXPORT AtomSpringContainer {
private:
        std::vector <AtomSpring> atomSpringVector;
        std::vector <ThreadingStruct> threadingStructVector;
        std::vector <ThreadingStruct> gappedThreadingStructVector;
public:
        void clear() {atomSpringVector.clear();};
        AtomSpringContainer() {clear(); };
        void printAtomSpring(const AtomSpring   atomSpring);
        void printAtomSpring(int atomSpringIndex);   
        void printAtomSprings();   
        void validateAtomSpring(const AtomSpring & atomSpring );// ,   BiopolymerClassContainer & myBiopolymerContainer);
        AtomSpring & initializeAtomSpring(AtomSpring & atomSpring);
        void add(AtomSpring atomSpring ){validateAtomSpring(atomSpring); atomSpringVector.push_back(atomSpring); };
        AtomSpring & updAtomSpring(int atomSpringIndex) {return atomSpringVector[atomSpringIndex]; };
        const AtomSpring getAtomSpring(int atomSpringIndex) {return atomSpringVector[atomSpringIndex]; };
        int numAtomSprings() {return atomSpringVector.size(); };
        const std::vector <AtomSpring> getAtomSpringVector( ){return atomSpringVector; };
        void deleteSpring(const int atomSpringIndex);
        void updateSpring(const int atomSpringIndex, const AtomSpring & );

        void clearThreading();
        const std::vector<ThreadingStruct> & getThreadingVector() { return threadingStructVector; }
        void validateThreading(const ThreadingStruct & threadingStruct, BiopolymerClassContainer & myBiopolymerClassContainer);
        void addThreading(const ThreadingStruct & threadingStruct, BiopolymerClassContainer & myBiopolymerClassContainer);
        void addThreading(String chain1, ResidueID resStart1, ResidueID resEnd1, String chain2, ResidueID resStart2, ResidueID resEnd2, double forceConstant, bool backboneOnly, BiopolymerClassContainer & myBiopolymerClassContainer);
        void deleteThreading(int id);
        void updateThreading(int id, const ThreadingStruct & threadingStruct, BiopolymerClassContainer & myBiopolymerClassContainer);
        void updateThreading(int id, String chain1, ResidueID resStart1, ResidueID resEnd1, String chain2, ResidueID resStart2, ResidueID resEnd2, double forceConstant, bool backboneOnly, BiopolymerClassContainer & myBiopolymerClassContainer);
        void createSpringsFromThreading(BiopolymerClassContainer & myBiopolymerClassContainer);

        void clearGappedThreading();
        const std::vector<ThreadingStruct> & getGappedThreadingVector() { return gappedThreadingStructVector; }
        void createSpringsFromGappedThreading(BiopolymerClassContainer & myBiopolymerClassContainer);
        void addGappedThreading(const ThreadingStruct & threadingStruct, BiopolymerClassContainer & myBiopolymerClassContainer);
        void addGappedThreading(String chain1, String chain2, double forceConstant, bool backboneOnly, BiopolymerClassContainer & myBiopolymerClassContainer);
        void deleteGappedThreading(int id);
        void updateGappedThreading(int id, const ThreadingStruct & threadingStruct, BiopolymerClassContainer & myBiopolymerClassContainer);
        void updateGappedThreading(int id, String chain1, String chain2, double forceConstant, bool backboneOnly, BiopolymerClassContainer & myBiopolymerClassContainer);

        static ThreadingStruct createGappedThreading(String chain1, String chain2, double forceConstant, bool backboneOnly, BiopolymerClassContainer & myBiopolymerClassContainer);

};




#endif

